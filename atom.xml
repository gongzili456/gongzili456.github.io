<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Geeekr Note]]></title>
  <subtitle><![CDATA[Keep Change]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://geeekr.com/"/>
  <updated>2016-02-16T08:27:45.000Z</updated>
  <id>http://geeekr.com/</id>
  
  <author>
    <name><![CDATA[liuguili]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[关于 UITableViewCell 的二三事]]></title>
    <link href="http://geeekr.com/something-about-uitableviewcell/"/>
    <id>http://geeekr.com/something-about-uitableviewcell/</id>
    <published>2016-01-06T15:14:27.000Z</published>
    <updated>2016-02-16T08:27:45.000Z</updated>
    <content type="html"><![CDATA[<p>UITableView 使用 UITableViewCell 对象来绘出那些显示的 rows，并将之缓存。 Table View 的 data source 通过 tableView:cellForRowAtIndexPath 方法向 UITableView 提供 UITableViewCell 对象。</p>
<h3 id="u5178_u578B_u7684_Cell__u5BF9_u8C61"><a href="#u5178_u578B_u7684_Cell__u5BF9_u8C61" class="headerlink" title="典型的 Cell 对象"></a>典型的 Cell 对象</h3><p>一个 Cell 对象包含许多部分，通常会包含文本（text），图片（image） 等。</p>
<p>下图为一种普通（normally）状态下的 Cell<br><img src="http://7xpuna.com1.z0.glb.clouddn.com/tv_cell_parts.jpg" alt=""></p>
<p>右边的小区域是附件视图（<code>accessory views</code>），左边为内容区（<code>content view</code>）当需要添加视图到 Cell 的时候，就需要将视图添加的 Cell 的 <code>contentView</code> 属性上。</p>
<p>下图为编辑模式下的一种示例<br><img src="http://7xpuna.com1.z0.glb.clouddn.com/tv_cell_parts_edit.jpg" alt=""></p>
<p><code>editing control</code> 可以是 <code>deletion control</code> 和 <code>insertion control</code> 的一种；</p>
<h3 id="u4F7F_u7528_u9884_u5B9A_u4E49_u98CE_u683C_u7684_Cell"><a href="#u4F7F_u7528_u9884_u5B9A_u4E49_u98CE_u683C_u7684_Cell" class="headerlink" title="使用预定义风格的 Cell"></a>使用预定义风格的 Cell</h3><p>iOS 预置了4种风格的 Cell</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UITableViewCellStyleDefault</span>,</span><br><span class="line"><span class="built_in">UITableViewCellStyleValue1</span>,</span><br><span class="line"><span class="built_in">UITableViewCellStyleValue2</span>,</span><br><span class="line"><span class="built_in">UITableViewCellStyleSubtitle</span></span><br></pre></td></tr></table></figure>
<p>下图为一种常见的 Cell 风格<br><img src="http://7xpuna.com1.z0.glb.clouddn.com/tv_cell_parts_simple.jpg" alt=""></p>
<h3 id="u81EA_u5B9A_u4E49_Cell"><a href="#u81EA_u5B9A_u4E49_Cell" class="headerlink" title="自定义 Cell"></a>自定义 Cell</h3><h3 id="u4F7F_u7528_StoryBoard__u52A0_u8F7D_Cell"><a href="#u4F7F_u7528_StoryBoard__u52A0_u8F7D_Cell" class="headerlink" title="使用 StoryBoard 加载 Cell"></a>使用 StoryBoard 加载 Cell</h3><h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>UITableView 使用 UITableViewCell 对象来绘出那些显示的 rows，并将之缓存。 Table View 的 data source 通过 tableView:cellForRowAtIndexPath 方法向 UITableView 提供 UITa]]>
    </summary>
    
      <category term="UITableViewCell" scheme="http://geeekr.com/tags/UITableViewCell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第0天，每天学点iOS]]></title>
    <link href="http://geeekr.com/0-day/"/>
    <id>http://geeekr.com/0-day/</id>
    <published>2016-01-04T13:39:53.000Z</published>
    <updated>2016-02-16T08:27:45.000Z</updated>
    <content type="html"><![CDATA[<p>从业以来，还从未挖过坑。想来多少有些遗憾，惶惶不可终日。故今日特挖此坑，以奠流年。 </p>
<p>本坑的主要目的是为了学习 iOS APP开发，以实现迎娶白富美走向人生巅峰的无上人生理想（每想及次，心中涟漪久久不能平息，哈哈哈哈哈哈）；<br>咳咳，经过高人指点最终确定，本系列的目标就是通过做一个微博客户端。就是下面这个样子：（据高人说这个页面包含了 iOS 曝光率最高的 UITableView 和 UITableViewCell 的使用，二者得一可安天行啊~哈哈哈哈）</p>
<p><img src="http://7jpt6v.com1.z0.glb.clouddn.com/12.pic_hd.jpg" alt=""></p>
<h3 id="u6211_u73B0_u6709_u7684_u6280_u80FD_u80CC_u666F_uFF1A"><a href="#u6211_u73B0_u6709_u7684_u6280_u80FD_u80CC_u666F_uFF1A" class="headerlink" title="我现有的技能背景："></a>我现有的技能背景：</h3><p>学 Java 出身，半路出家转了 NodeJs，现在要来学 Swift，对 Swift 停留在能看懂的状态。所以几乎是从零学起了。<br>为了避免太基础而有乏味的语法阶段，所以本系列直接从 UITableViewCell 控件开始。</p>
<h3 id="u7ED3_u5C3E"><a href="#u7ED3_u5C3E" class="headerlink" title="结尾"></a>结尾</h3><p>就这么多吧，考虑到每天需要 4 个小时的通勤时间，我也不太清楚需要多久才能搞定，但是希望不要超过一个月，哈哈，又有些急性子了。<br>That’s all. ^_^</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从业以来，还从未挖过坑。想来多少有些遗憾，惶惶不可终日。故今日特挖此坑，以奠流年。 </p>
<p>本坑的主要目的是为了学习 iOS APP开发，以实现迎娶白富美走向人生巅峰的无上人生理想（每想及次，心中涟漪久久不能平息，哈哈哈哈哈哈）；<br>咳咳，经过高人指点最终确定，]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Writing WebSocket Server use Javascript]]></title>
    <link href="http://geeekr.com/writing-websocket-server-use-javascript/"/>
    <id>http://geeekr.com/writing-websocket-server-use-javascript/</id>
    <published>2015-08-03T07:39:33.000Z</published>
    <updated>2015-08-04T02:22:07.000Z</updated>
    <content type="html"><![CDATA[<p>##What are WebSocket?</p>
<p>根据<a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="external">RFC 6455</a>文件对 WebSocket 的描述，我们可以了解到：WebSocket 是『在受控环境中运行不受信任代码的一个客户端到一个从该代码已经选择加入通信的远程主机间的全双工通信』。</p>
<blockquote>
<p>The WebSocket Protocol enables two-way communication between a client<br>   running untrusted code in a controlled environment to a remote host<br>   that has opted-in to communications from that code.</p>
</blockquote>
<h2 id="Why_would_I_need_WebSocket_3F"><a href="#Why_would_I_need_WebSocket_3F" class="headerlink" title="Why would I need WebSocket?"></a>Why would I need WebSocket?</h2><p>想象一下这个情景，你在网页上向你的好友发了一条消息，然后你就等待对方回应，但是你不知道对方什么时候才会给你回复，你可能会一直刷新页面知道你看到对方的回复，这真是太累了。这时你想如果消息能主动的推倒你的面前那该多好啊。但是HTTP协议是无状态的，每次传递消息都必须新建连接，所以HTTP无法实现这个需求。WebSocket 就是用来解决需要进行实时通信应用的，比如股票查询等。</p>
<h2 id="How_do_they_work_3F"><a href="#How_do_they_work_3F" class="headerlink" title="How do they work?"></a>How do they work?</h2><p>WebSocket 分两个阶段，握手和数据传输（handshake and the data transfer）。</p>
<h3 id="Handshake"><a href="#Handshake" class="headerlink" title="Handshake"></a>Handshake</h3><p>握手就是建立 Client 到 Server 的互信关系，从而建立连接。<br>握手的过程是基于HTTP协议实现的，这要求 Client 和 Server 使用指定的 Header 来实现。</p>
<h4 id="Client_Header"><a href="#Client_Header" class="headerlink" title="Client Header"></a>Client Header</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">GET <span class="string">/chat</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">server.example.com</span></span><br><span class="line"><span class="attribute">Upgrade</span>: <span class="string">websocket</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">Upgrade</span></span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: <span class="string">dGhlIHNhbXBsZSBub25jZQ==</span></span><br><span class="line"><span class="attribute">Origin</span>: <span class="string">http://example.com</span></span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: <span class="string">chat, superchat</span></span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span>: <span class="string">13</span></span><br></pre></td></tr></table></figure>
<h4 id="Server_Header"><a href="#Server_Header" class="headerlink" title="Server Header"></a>Server Header</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="status">HTTP/1.1 <span class="number">101</span> Switching Protocols</span></span><br><span class="line"><span class="attribute">Upgrade</span>: <span class="string">websocket</span></span><br><span class="line"><span class="attribute">Connection</span>: <span class="string">Upgrade</span></span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: <span class="string">s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span></span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: <span class="string">chat</span></span><br></pre></td></tr></table></figure>
<p>这里需要主意的一点就是：Client 发起握手请求，将<code>Sec-WebSocket-Key</code>发给 Server，然后 Server 将其与 <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code> 拼起来（在本例子中将是 “s3pPLMBiTxaQ9kYGzzhZRbK+xOo=258EAFA5-E914-47DA-95CA-C5AB0DC85B11” ）。然后进行 <code>SHA-1 hash</code>，再将其结果进行base64编码。</p>
<h2 id="Data_Frame"><a href="#Data_Frame" class="headerlink" title="Data Frame"></a>Data Frame</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>                   <span class="number">1</span>                   <span class="number">2</span>                   <span class="number">3</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (<span class="number">4</span>)  |A|     (<span class="number">7</span>)     |             (<span class="number">16</span>/<span class="number">64</span>)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (<span class="keyword">if</span> payload len==<span class="number">126</span>/<span class="number">127</span>)   |</span><br><span class="line">| |<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, <span class="keyword">if</span> payload len == <span class="number">127</span>  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, <span class="keyword">if</span> MASK <span class="built_in">set</span> to <span class="number">1</span>  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<ul>
<li>FIN: 1bit<br>指示这个消息是否是最否一个片段；</li>
<li>RSV1, RSV2, RSV3: 每个1 bit。默认为零，保留位，可自己实现定义；</li>
<li>Opcode: 4 bits 定义 payload data 的解释，如果收到一个未知的操作码，接收端点必须 <em>将 WebSokcket 连接视为失败</em>。 定义了以下值。<ol>
<li>%x0 代表一个继续帧</li>
<li>%x1 代表一个文本帧</li>
<li>%x2 代表一个二进制帧</li>
<li>%x3-7 保留用于未来的非控制帧</li>
<li>%x8 代表连接关闭</li>
<li>%x9 代表ping</li>
<li>%xA 代表pong</li>
<li>%xB-F 保留用于未来的控制帧</li>
</ol>
</li>
<li><p>Mask: 1 bit<br>定义 “负载数据”是否是经过掩码的。 如果设置为1，一个掩码键出现在masking-key，且这个是用于根据 5.3 节解掩码(unmask)“负载数据”。 从客户端发送到服务器的所有帧有这个位设置为1。</p>
</li>
<li><p>Payload length: 7 bits, 7+16 bits, 或者 7+64 bits：<br>“负载数据”的长度，以字节为单位：如果是 0-125，这是负载长度。 如果是 126，之后的两字节解释为一个16位的无符号整数是负载长度。 如果是127，之后的8字节解释为一个64位的无符号整数（最高有效位必须是0）是负载长度。 多字节长度数量以网络字节顺序来表示。 注意，在所有情况下，最小数量的字节必须用于编码长度，例如，一个124字节长的字符串的长度不能被编码为序列126，0，124。 负载长度是“扩展数据”长度+“应用数据”长度。 “扩展数据”长度可能是零，在这种情况下，负载长度是“应用数据”长度。</p>
</li>
<li><p>Masking-key: 0 or 4 bytes：<br>客户端发送到服务器的所有帧通过一个包含在帧中的32位值来掩码。 如果mask位设置为1，则该字段存在，如果mask位设置为0，则该字段缺失。 详细信息请参见5.3节 客户端到服务器掩码。</p>
</li>
<li><p>Payload data: (x+y) bytes：<br>“负载数据”定义为“扩展数据”连接“应用数据”。</p>
</li>
<li><p>Extension data: x bytes：<br>“扩展数据”是 0 字节除非已经协商了一个扩展。 任何扩展必须指定“扩展数据”的长度，或长度是如何计算的，以及扩展如何使用必须在打开阶段握手期间协商。 如果存在，“扩展数据”包含在总负载长度中。</p>
</li>
<li><p>Application data: y bytes：<br>任意的“应用数据”，占用“扩展数据”之后帧的剩余部分。 “应用数据”的长度等于负载长度减去“扩展数据”长度。</p>
</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>代码详见<a href="https://github.com/gongzili456/websocket-example/tree/master" target="_blank" rel="external">我的github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##What are WebSocket?</p>
<p>根据<a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="external">RFC 6455</a>文件对 WebSocket 的描述]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Install Redis on Debian]]></title>
    <link href="http://geeekr.com/install-redis-on-debian/"/>
    <id>http://geeekr.com/install-redis-on-debian/</id>
    <published>2015-06-19T08:43:29.000Z</published>
    <updated>2015-06-19T09:00:18.000Z</updated>
    <content type="html"><![CDATA[<p>###准备环境：<br>我的本机环境<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#lsb_release -a</span></span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Debian</span><br><span class="line"><span class="label">Description:</span>	Debian GNU/Linux <span class="number">7.8</span> (wheezy)</span><br><span class="line"><span class="label">Release:</span>	<span class="number">7.8</span></span><br><span class="line"><span class="label">Codename:</span>	wheezy</span><br></pre></td></tr></table></figure></p>
<ol>
<li>更新包<br><code>sudo apt-get update</code></li>
<li>安装必要依赖<br><code>sudo apt-get install build-essential tcl8.5</code></li>
</ol>
<p>###安装Redis</p>
<ol>
<li><p>下载redis安装包，版本自行选择。<br><code>wget http://download.redis.io/releases/redis-3.0.2.tar.gz</code></p>
</li>
<li><p>解压安装包。<br><code>tar -zxvf redis-3.0.2.tar.gz &amp;&amp; cd redis-3.0.2</code></p>
</li>
<li><p>编译安装<br><code>make &amp;&amp; make install</code></p>
</li>
</ol>
<p>###配置Redis</p>
<ol>
<li><code>cd utils</code></li>
<li>执行配置脚本<br><code>sudo ./install_server.sh</code></li>
</ol>
<p>这里会配置一些参数，都有默认值，可以一路回车到底。</p>
<ol>
<li>启动和关闭命令<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service redis_6379 <span class="literal">start</span></span><br><span class="line">sudo service redis_6379 <span class="literal">stop</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>###客户端访问</p>
<ol>
<li><code>redis-cli -p 6379</code></li>
<li>你将会看到<br><code>redis 127.0.0.1:6379&gt;</code></li>
</ol>
<p>###最后</p>
<p>设置redis开机启动<br><code>sudo update-rc.d redis_6379 defaults</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>###准备环境：<br>我的本机环境<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="lin]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS 搭建 Ghost 博客]]></title>
    <link href="http://geeekr.com/install-ghost-on-centos/"/>
    <id>http://geeekr.com/install-ghost-on-centos/</id>
    <published>2014-12-09T19:52:22.000Z</published>
    <updated>2014-12-09T19:54:23.000Z</updated>
    <content type="html"><![CDATA[<p>至于为什么要写博客网上有很多大牛都写了自己的观点，我就不赘述了，既然你找到了这里，那就意味着你对博客感兴趣；至于为什么选择Ghost，网上也有一大堆的夸赞，但我只想说，它轻便快捷，最重要的是我能看懂Node.js的代码^_^；</p>
<p>下面就跟着我一块来弄个个人博客吧。</p>
<p>##基本的信息</p>
<ul>
<li>digitalocean旧金山5美元VPS</li>
<li>CentOS 6.5 x32</li>
<li>Node.js 0.10.33</li>
<li>MySQL 5.1 //mysql&gt; select version();查看</li>
<li>Nginx 1.7.8</li>
<li>ghost 0.5.6</li>
</ul>
<p>##初始化VPS</p>
<ol>
<li><code>yum update</code> 更新yum源</li>
<li><code>yum groupinstall &quot;Development Tools&quot;</code> 安装开发工具组包 </li>
<li><code>yum install wget</code></li>
</ol>
<p>##yum install MySQL</p>
<ol>
<li><code>yum install mysql mysql-server</code> //通过yum命令安装</li>
<li><code>service mysqld start</code>    //启动MySQL</li>
<li><code>chkconfig mysqld on</code>    //配置开机自启动</li>
<li><code>mysql_secure_installation</code> //配置MySQL，以下是详细内容</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//输入安装MySQL时的密码，此时为空，直接回车</span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">Set</span> root <span class="keyword">password</span>? [Y/<span class="keyword">n</span>]		//设置root密码</span><br><span class="line"><span class="keyword">New</span> <span class="keyword">password</span>:</span><br><span class="line">Re-enter <span class="keyword">new</span> <span class="keyword">password</span>:</span><br><span class="line"><span class="keyword">Password</span> <span class="keyword">updated</span> successfully!</span><br><span class="line">Reloading privilege <span class="keyword">tables</span>..</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"></span><br><span class="line">Remove anonymous <span class="keyword">users</span>? [Y/<span class="keyword">n</span>]	//删除匿名用户</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"> </span><br><span class="line"><span class="keyword">Disallow</span> root login remotely? [Y/<span class="keyword">n</span>]	//禁止root用户远程登录</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"></span><br><span class="line">Remove <span class="keyword">test</span> <span class="keyword">database</span> <span class="keyword">and</span> <span class="keyword">access</span> <span class="keyword">to</span> it? [Y/<span class="keyword">n</span>] //删除默认的 <span class="keyword">test</span> 数据库， </span><br><span class="line"> - Dropping <span class="keyword">test</span> <span class="keyword">database</span>...</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"> - Removing <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">test</span> <span class="keyword">database</span>...</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Reload privilege <span class="keyword">tables</span> <span class="keyword">now</span>? [Y/<span class="keyword">n</span>]	//是否马上应用最新的设置</span><br><span class="line"> ... <span class="keyword">Success</span>!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  <span class="keyword">If</span> you<span class="string">'ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MySQL!</span></span></span><br></pre></td></tr></table></figure>
<p>至此，MySQL安装成功。</p>
<p>为了正常使用MySQL，还得稍作配置才行。</p>
<p>####设置字符编码为UTF-8<br>编辑MySQL的配置文件</p>
<p><code>vi /etc/my.cnf</code></p>
<p>将下面内容填入响应位置即可支持中文，<a href="http://www.geeekr.com/change-mysql-character/" target="_blank" rel="external">详细参考</a></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-<span class="operator"><span class="keyword">set</span>=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-<span class="built_in">character</span>-<span class="keyword">set</span>=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</span></span><br></pre></td></tr></table></figure>
<p>####为Ghost程序设置专用用户</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//登录MySQL</span><br><span class="line">mysql -u root -p</span><br><span class="line">//添加名为ghost的用户，并给ghost用户授予ghost数据库的所有权限，并且设置ghost用户密码</span><br><span class="line"><span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> ghost.* <span class="keyword">To</span> <span class="string">'ghost'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span></span><br></pre></td></tr></table></figure>
<p>##编译安装Node.js</p>
<ol>
<li><code>wget http://nodejs.org/dist/v0.10.33/node-v0.10.33.tar.gz</code></li>
<li><code>tar zxvf node-v0.10.33.tar.gz</code></li>
<li><code>cd node-v0.10.33</code></li>
<li><code>./configure</code></li>
<li><code>make &amp;&amp; make install</code></li>
</ol>
<p>##编译安装Nginx</p>
<p>Nginx需要依赖于<code>pcre-devel zlib zlib-devel</code>。<br><code>yum install pcre-devel zlib zlib-devel</code></p>
<ol>
<li><code>wget http://nginx.org/download/nginx-1.7.8.tar.gz</code></li>
<li><code>tar zxvf nginx-1.7.8.tar.gz</code></li>
<li><code>cd nginx-1.7.8</code></li>
<li><code>./configure</code></li>
<li><code>make &amp;&amp; make install</code></li>
</ol>
<p>##安装Ghost</p>
<ol>
<li><code>mkdir /var/www</code>    //这里将<code>/var/www</code>目录作为博客根目录</li>
<li><code>cd /var/www</code></li>
<li><code>wget https://ghost.org/zip/ghost-0.5.6.zip</code></li>
<li><code>unzip ghost-0.5.6.zip -d ghost</code>    //解压到ghost目录</li>
<li><code>cd ghost</code></li>
<li><code>tree -L 1</code>    //使用<code>tree</code>命令查看目录数 <a href="http://www.geeekr.com/tree-command-on-mac/" target="_blank" rel="external">参考</a></li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bower<span class="class">.json</span></span><br><span class="line">├── config<span class="class">.example</span><span class="class">.js</span></span><br><span class="line">├── <span class="attribute">content</span></span><br><span class="line">├── core</span><br><span class="line">├── Gruntfile<span class="class">.js</span></span><br><span class="line">├── index<span class="class">.js</span></span><br><span class="line">├── LICENSE</span><br><span class="line">├── package<span class="class">.json</span></span><br><span class="line">├── PRIVACY<span class="class">.md</span></span><br><span class="line">├── README<span class="class">.md</span></span><br><span class="line">└── testem.json</span><br></pre></td></tr></table></figure>
<p>这里需要将<code>config.example.js</code>重命名为<code>config.js</code>，然后并对其配置。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv config<span class="class">.example</span><span class="class">.js</span> config<span class="class">.js</span></span><br><span class="line">vi config.js</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">production</span>: <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">url</span>:<span class="value"> <span class="string">'http:geeekr.com'</span>,	//此处应该改成你自己的域名，如果暂时没有域名，那就写成IP地址。</span><br><span class="line">    mail: &#123;</span></span></span>&#125;,</span><br><span class="line">    <span class="tag">database</span>: <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">client</span>:<span class="value"> <span class="string">'mysql'</span>,</span><br><span class="line">        connection: &#123;</span><br><span class="line">            host     : <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            user     : <span class="string">'ghost'</span>, //上面配置过</span><br><span class="line">            password : <span class="string">'ghost对应的密码'</span>, //上面配置过</span><br><span class="line">            database : <span class="string">'ghost'</span>, //我们前面为 Ghost 创建的数据库名称</span><br><span class="line">            charset  : <span class="string">'utf8'</span></span><br><span class="line">        </span></span></span>&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="tag">server</span>: <span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">host</span>:<span class="value"> <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        	port: <span class="string">'2368'</span>//若修改该端口记得在nginx中做相应改变</span><br><span class="line">        </span></span></span>&#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>配置完成后使用<code>npm</code>命令安装依赖模块</p>
<p><code>npm install --production</code></p>
<p><code>--production</code>的意思就是以production的配置信息来加载依赖模块。</p>
<p>为了让Ghost程序能够后台运行，我们还得再安装个工具，就是<code>forever</code>，使用<code>-g</code>参数就是在全局模式中安装，这样我们就可以再任何地方都能使用<code>forever</code>命令了。</p>
<p><code>npm install forever -g</code></p>
<p>启动命令是：</p>
<p><code>NODE_ENV=production forever start index.js</code></p>
<blockquote>
<p>注意：要在ghost目录下使用哦，如果要在其他目录下使用那就得给index.js文件加上完整路径了。</p>
</blockquote>
<p>此时还没完，还要配置Nginx信息。</p>
<p>##配置Nginx<br>编辑Nginx配置文件</p>
<p><code>vi /usr/local/nginx/conf/nginx.conf</code></p>
<p>修改下面内容<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen      <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass              http://localhost:<span class="number">2368</span>;</span><br><span class="line">            proxy_set_header        Host      <span class="variable">$http</span>_host;</span><br><span class="line">            proxy_set_header        X-Real-IP <span class="variable">$remote</span>_addr;</span><br><span class="line">            proxy_set_header        X-Forwarded-For <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里只配置主要部分，具体详细的优化配置需要自己去学习。</p>
<p>##完结<br>如果不出意外，输入你的域名或IP地址就能看到 Ghost 的界面了。当然，一般都是会出现意外的，这个时候建议你查看如下内容：</p>
<p>nginx 错误日志，/var/log/nginx/error.log<br>Ghost 代码所在目录的权限<br>Ghost 的配置是否正确<br>数据库能否正常连接</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>至于为什么要写博客网上有很多大牛都写了自己的观点，我就不赘述了，既然你找到了这里，那就意味着你对博客感兴趣；至于为什么选择Ghost，网上也有一大堆的夸赞，但我只想说，它轻便快捷，最重要的是我能看懂Node.js的代码^_^；</p>
<p>下面就跟着我一块来弄个个人博客吧]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac如何更改maven的java版本]]></title>
    <link href="http://geeekr.com/fix-maven-java-version-mac-osx/"/>
    <id>http://geeekr.com/fix-maven-java-version-mac-osx/</id>
    <published>2014-11-21T02:06:24.000Z</published>
    <updated>2014-11-25T23:38:00.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (default-compile) on project api: Fatal error compiling: invalid target release: 1.7 -&#62; [Help 1]</span><br></pre></td></tr></table></figure>
<p>根据错误提示<code>invalid target release: 1.7</code>，无效的目标版本。</p>
<p>###查看pom.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>根据配置可以看出<code>maven-compiler-plugin</code>的目标版本是JDK 1.7；</p>
<p>###查看JDK版本<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  java -version&#10;java version &#34;1.7.0_71&#34;&#10;Java(TM) SE Runtime Environment (build 1.7.0_71-b14)&#10;Java HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)</span><br></pre></td></tr></table></figure></p>
<p>根据上面信息可以看出我的jdk版本也是1.7；</p>
<p>那么问题出在哪里了呢？</p>
<p>###查看Maven信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  mvn -v&#10;Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-15T01:37:52+08:00)&#10;Maven home: /usr/local/Cellar/maven/3.2.1/libexec&#10;Java version: 1.7.0_71, vendor: Oracle Corporation&#10;Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&#10;Default locale: zh_CN, platform encoding: UTF-8&#10;OS name: &#34;mac os x&#34;, version: &#34;10.10&#34;, arch: &#34;x86_64&#34;, family: &#34;mac&#34;</span><br></pre></td></tr></table></figure>
<p>终于真想大白了，原来maven引用的是1.6的版本，那么如何修改配置为1.7版本呢？</p>
<p>原来，maven读两个配置文件，<code>/etc/mavenrc</code> 和 <code>~/.mavenrc</code>。两个文件默认是没有的，可以任意选择一个做修改，我选择我用户目录下的<code>~/.mavenrc</code>，将下面代码写入。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=`/usr/libexec/java_home`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你在Mac上安装了多个版本的JDK，而又不想改变默认的JDK版本，那么你只需要在配置后面加上版本号即可，比如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=`/usr/libexec/java_home -v 1.7`</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在Mac中<code>/usr/libexec/java_home</code>表示<code>java_home</code>的一个连接文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  ll /usr/libexec/java_home&#10;lrwxr-xr-x  1 root  wheel    79B 11 14 16:39 /usr/libexec/java_home -&#62; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home</span><br></pre></td></tr></table></figure>
<p>然后在执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10140;  ~  mvn -v&#10;Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-15T01:37:52+08:00)&#10;Maven home: /usr/local/Cellar/maven/3.2.1/libexec&#10;Java version: 1.7.0_71, vendor: Oracle Corporation&#10;Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Home/jre&#10;Default locale: zh_CN, platform encoding: UTF-8&#10;OS name: &#34;mac os x&#34;, version: &#34;10.10&#34;, arch: &#34;x86_64&#34;, family: &#34;mac&#34;</span><br></pre></td></tr></table></figure>
<p>然后在install项目就没有这个错误了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="li]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[istat menu 5.11 注册码]]></title>
    <link href="http://geeekr.com/istat-menu-5-02-zhu-ce-ma/"/>
    <id>http://geeekr.com/istat-menu-5-02-zhu-ce-ma/</id>
    <published>2014-10-21T02:18:00.000Z</published>
    <updated>2015-10-14T08:42:31.000Z</updated>
    <content type="html"><![CDATA[<p>Apple 发布了Yosemite后当天就收到推送更新，GeeeKr君当然按耐不住升级了，升级后各种软件都提示升级，istat menu升级到5.02版本需要注册码，首先声明有能力当然要支持正版了，我等屌丝只好苦寻免费办法了，威锋社区是个好地方，好多热心网友都在上面分享好东西，不时去逛逛总会有收获的。这个注册码就是热心网友在威锋上分享的。现在我也把它转赠与各位读者。</p>
<p> istat menu 5.11 注册码，亲测有效哦。</p>
<blockquote>
<p>9665-5955-6856-2071-0000</p>
</blockquote>
<p><img src="http://geeekr.qiniudn.com/images/4/01/90b20e1887abd20b72081ba4e5a60.png" alt=""></p>
<p><img src="http://blog-geeekr-com.qiniudn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-20%2022.20.37.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Apple 发布了Yosemite后当天就收到推送更新，GeeeKr君当然按耐不住升级了，升级后各种软件都提示升级，istat menu升级到5.02版本需要注册码，首先声明有能力当然要支持正版了，我等屌丝只好苦寻免费办法了，威锋社区是个好地方，好多热心网友都在上面分享好东]]>
    </summary>
    
      <category term="
- 软件破解" scheme="http://geeekr.com/tags/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动手写游戏--2048]]></title>
    <link href="http://geeekr.com/write-game-2048/"/>
    <id>http://geeekr.com/write-game-2048/</id>
    <published>2014-10-16T23:27:05.000Z</published>
    <updated>2014-10-17T01:32:34.000Z</updated>
    <content type="html"><![CDATA[<p>2048游戏大家都很熟悉了，今天来练练手。<br><img src="http://geeekr.qiniudn.com/images/6/71/b03d53e397c9f1e46ca0eb9a89e00.png" alt=""></p>
<p>###规则:</p>
<ul>
<li>在一个4*4的方格中</li>
<li>同一行数字向一端移动，且相邻两个相同的数字相加合并，</li>
<li>再在随机位置产生一个随机数字2或4，</li>
<li>当没有空余格（输）或最大值为2048（胜）时游戏结束，</li>
</ul>
<p>###设计</p>
<p>该游戏最关键的逻辑是如何将每一行移到同一方向，且将相邻等值数字相加合并。</p>
<p>可以把所有方块用二维数组存储，假设我们拿类<code>Cell</code>表示每个方块，那我们的数据结构就是<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cell[<span class="link_label"></span>][<span class="link_reference"></span>] cells = new Cell[<span class="link_label">4</span>][<span class="link_reference">4</span>]</span><br></pre></td></tr></table></figure></p>
<p><img src="http://geeekr.qiniudn.com/images/2/8b/5da1ba76d21cf10a430f454344b7d.png" alt=""></p>
<p>由于游戏涉及到上下左右四个方向，难点就在于如何获取横向和纵向的每一排数，横向当然好取，可是纵向就麻烦了，这还牵扯到移动方向的问题，就更复杂了，</p>
<p>如果能有一个方式让我们用相同的方式就能取到横向或纵向的任意一行就好了，方法当然是有的。这就涉及到数学中的三角函数了。大家可以自行Google“三角函数和差公式”。<br>也可直接进入<a href="http://http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html" target="_blank" rel="external">我的参考</a></p>
<p><img src="http://geeekr.qiniudn.com/images/4/c0/defa934db419c6aef2f1ba3277ef1.png" alt=""></p>
<p>如上图，经过旋转，我们很容易能根据X的值就能得到任意行数字了，当我们对该行操作完成后在经过旋转就恢复到原来样子了，注意整个操作是同一方向旋转360度。</p>
<p>###总结<br>解决了获取任意行数字的问题，剩下的就简单了。也就不多说了，具体可以看我的代码：<a href="https://github.com/gongzili456/2048" target="_blank" rel="external">Github</a></p>
<p><img src="http://geeekr.qiniudn.com/images/9/95/1c8bfddabe33b276faaba401d14f5.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2048游戏大家都很熟悉了，今天来练练手。<br><img src="http://geeekr.qiniudn.com/images/6/71/b03d53e397c9f1e46ca0eb9a89e00.png" alt=""></p>
<p>###规则:</p>
<ul]]>
    </summary>
    
      <category term="
- game
- 2048" scheme="http://geeekr.com/tags/game-2048/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[三角函数和差公式]]></title>
    <link href="http://geeekr.com/san-jiao-han-shu-he-chai-gong-shi/"/>
    <id>http://geeekr.com/san-jiao-han-shu-he-chai-gong-shi/</id>
    <published>2014-10-16T19:06:52.000Z</published>
    <updated>2014-10-16T21:12:36.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://geeekr.qiniudn.com/images/e/b3/151444b7bd635c4ac14e7c677d918.jpg" alt=""><br>公式：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sin</span><span class="params">(δ+β)</span></span> = <span class="function"><span class="title">sin</span><span class="params">(δ)</span><span class="title">cos</span><span class="params">(β)</span></span> + <span class="function"><span class="title">cos</span><span class="params">(δ)</span><span class="title">sin</span><span class="params">(β)</span></span></span><br><span class="line"><span class="function"><span class="title">cos</span><span class="params">(δ+β)</span></span> = <span class="function"><span class="title">cos</span><span class="params">(δ)</span><span class="title">cos</span><span class="params">(β)</span></span> - <span class="function"><span class="title">sin</span><span class="params">(δ)</span><span class="title">sin</span><span class="params">(β)</span></span></span><br></pre></td></tr></table></figure>
<p>所以得出：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = r*<span class="literal">cos</span>(δ+β) = r*<span class="literal">cos</span>(δ)<span class="literal">cos</span>(β) - r*<span class="literal">sin</span>(δ)<span class="literal">sin</span>(β) = x * <span class="literal">cos</span>(β) - y * <span class="literal">sin</span>(β)</span><br><span class="line"><span class="keyword">d</span> = r*<span class="literal">sin</span>(δ+β) = r*<span class="literal">sin</span>(δ)<span class="literal">cos</span>(β) + r*<span class="literal">cos</span>(δ)<span class="literal">sin</span>(β) = y * <span class="literal">cos</span>(β) + x * <span class="literal">sin</span>(β)</span><br></pre></td></tr></table></figure></p>
<p>需要的最终结果：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = x * <span class="literal">cos</span>(β) - y * <span class="literal">sin</span>(β)</span><br><span class="line"><span class="keyword">d</span> = y * <span class="literal">cos</span>(β) + x * <span class="literal">sin</span>(β)</span><br></pre></td></tr></table></figure>
<p>此结果用于旋转象限非常适用。</p>
<p>像游戏<code>2048</code>就能用到。<br><br><img src="http://geeekr.qiniudn.com/images/2/06/f77dd5788a50ce4f5296ff2072a9c.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://geeekr.qiniudn.com/images/e/b3/151444b7bd635c4ac14e7c677d918.jpg" alt=""><br>公式：</p>
<figure class="highlight stylus"><t]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK剖析-集合篇-LinkedList]]></title>
    <link href="http://geeekr.com/jdk-source-collections-linkedlist/"/>
    <id>http://geeekr.com/jdk-source-collections-linkedlist/</id>
    <published>2014-09-12T11:04:16.000Z</published>
    <updated>2014-09-26T19:32:08.000Z</updated>
    <content type="html"><![CDATA[<p>##构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##全局变量</p>
<p>###元素类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可见LinkedList的双向链表结构，Node类包含了分别指向前一节点和后一个节点的两个引用，还有就是对自己的引用item。构造方法需要接受前后两个节点的引用。</p>
<p><code>transient Node&lt;E&gt; first;</code><br><br><code>transient Node&lt;E&gt; last;</code></p>
<p>如果LinkedList的长度为0，那么first和last都为Null，否则first.prev==null &amp;&amp; last.next==null,并且first和last都不能为Null。</p>
<p><code>transient int size = 0;</code></p>
<p>##add()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedList的add方法是将元素往链表的尾部插入，当然也可以在头部插入，是同样的道理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##remove()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查索引位置的合法性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历对应索引位置的元素对象，最多索引总长度的一半</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断被删除节点是否为特首的头尾节点，然后将该节点的前后节点指向正确的元素即可，由此可见链表的删除方式还是非常简单的，并没有遍历完整的链表(最多遍历链表长度的一半)，也不用更改链表的索引值。索引速度是比数组结构要快些。</p>
<p>##总结</p>
<p>LinkedList内部维护了一个链表结构，对于链表只要知道头或尾就能遍历出所有元素，当add元素的时候，会将元素封装成Node<e>这个内部类就拥有分别指向前节点，后节点，自己节点的引用了。LinkedList遍历链表最多只遍历总长度的一半，避免了遍历完整表，有效提高了查找效率。</e></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><b]]>
    </summary>
    
      <category term="
- Java
- Java集合
- LinkedList
- java" scheme="http://geeekr.com/tags/Java-Java%E9%9B%86%E5%90%88-LinkedList-java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK剖析-集合篇-ArrayList]]></title>
    <link href="http://geeekr.com/jdk-source-collections-arraylist/"/>
    <id>http://geeekr.com/jdk-source-collections-arraylist/</id>
    <published>2014-09-12T10:06:53.000Z</published>
    <updated>2014-09-24T08:02:56.000Z</updated>
    <content type="html"><![CDATA[<p>Arraylist和LinkedList是在工作中常用的集合工具。</p>
<p>##构造方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>初始化长度为0的Object[]，当第一次add()方法时，扩充为DEFAULT_CAPACITY个长度(默认为10)；</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化initialCapacity长度的Object[]，</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">public ArrayList(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">	elementData = c<span class="string">.toArray()</span>;</span><br><span class="line">	size = elementData<span class="string">.length</span>;</span><br><span class="line">	// c<span class="string">.toArray</span> might (incorrectly) not return Object[] (see 6260652)</span><br><span class="line">    if (elementData<span class="string">.getClass()</span> != Object[]<span class="string">.class)</span></span><br><span class="line">        elementData = Arrays<span class="string">.copyOf(elementData</span>, size, Object[]<span class="string">.class)</span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>初始化长度为c.size()的Object[]。</p>
<p>##全局变量</p>
<p><code>private static final int DEFAULT_CAPACITY = 10;</code><br><br>当第一次add的时候，默认扩容的长度</p>
<p><code>private static final Object[] EMPTY_ELEMENTDATA = {};</code><br><br>空构造初始化的对象</p>
<p><code>private transient Object[] elementData;</code><br><br>保存元素的数组</p>
<p><code>private int size;</code><br><br>当前list的长度</p>
<p><code>protected transient int modCount = 0;</code><br><br>list长度修改的次数，即elementData修改的次数</p>
<p><code>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</code><br><br>list的最大长度，减8是因为有些虚拟机会将头信息放进数组中，为了防止OutOfMemoryError发生，</p>
<p>##add()方法</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[<span class="built_in">size</span>++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先确定确定list的容量，如果容量满了，就扩容。<br>然后存入size++位置<br>返回true</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先判断elementData是不是刚初始化的空数组，如果是就将minCapacity赋值为DEFAULT_CAPACITY(默认为10)，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将elementData的修改次数modCount加一</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>oldCapacity &gt;&gt; 1 就是oldCapacity的二分之一，也就是newCapacity= oldCapacity*1.5，也就是数组需要扩容是则扩容原来的1.5倍的长度。</p>
<p>##remove()方法</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    rangeCheck(<span class="built_in">index</span>);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(<span class="built_in">index</span>);</span><br><span class="line">    <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>, numMoved);</span><br><span class="line">    elementData[--<span class="built_in">size</span>] = null; // clear to let GC <span class="keyword">do</span> its work</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据索引值查出元素位置，首先检查索引位置的合法性，记录修改次数，拿出被删元素，将被删除索引位置后面的元素依次往前移，将尾部元素位置至Null，记录数组size，并返回被删元素。</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据元素对象删除，根据元素是否为Null，遍历出元素位置，然后删除。</p>
<p>##set()方法<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E set(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">    rangeCheck(<span class="keyword">index</span>);</span><br><span class="line">    E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line">    elementData[<span class="keyword">index</span>] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>##get()方法<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    rangeCheck(<span class="keyword">index</span>);</span><br><span class="line">    <span class="keyword">return</span> elementData(<span class="keyword">index</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>##总结<br>ArrayList类的内部实现比较简单，内部维护一个Object数组，当需要扩充容量的时候，会新建一个Object数组，将原来的数据拷贝进来。操作list的方法实现也较简单。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Arraylist和LinkedList是在工作中常用的集合工具。</p>
<p>##构造方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line]]>
    </summary>
    
      <category term="
- Java
- Java集合
- ArrayList
- java" scheme="http://geeekr.com/tags/Java-Java%E9%9B%86%E5%90%88-ArrayList-java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Memcached内存分配]]></title>
    <link href="http://geeekr.com/memcachednei-cun-fen-pei/"/>
    <id>http://geeekr.com/memcachednei-cun-fen-pei/</id>
    <published>2014-09-04T02:33:15.000Z</published>
    <updated>2014-09-23T06:55:03.000Z</updated>
    <content type="html"><![CDATA[<p>Memcached是在项目中常使用的分布式缓存服务。很好的解决了MySQL数据库的访问压力。所以我们要懂它，用好它。</p>
<p>Memcached有三个概念：page，slabs，chunk，要理解Memcached是如何来存储数据的，那就要理解这三个概念是怎么一回事。</p>
<p>###Page<br>Memcached的内存分配是以page为单位的，默认情况下一个page是1M大小。当需要申请内存时，memcached会划分一个page给需要的slabs区域。</p>
<p>###slabs<br>Memcached不是将所有大小的数据都存在一块的，而是预先划分出不同的区域将不同大小的数据分别存放，这就是slabs。每个slabs只负责存储一定范围大小的数据(由chunk决定)。<br><img src="http://blog-geeekr-com.qiniudn.com/images%2F1%2Fdd%2F7eb83f3bdbc5cd9a51ce1976bd22e.png" alt=""></p>
<p>###chunk<br>chunk是memcached实际存放数据的地方，chunk的大小就是管理它的slabs的最大值，所以分配给当前chunk的数据都能被存下，如果数据小于当前chunk的大小，那么剩余的空间将被闲置，这是防止内存碎片划而设计的。<br><img src="http://geeekr.qiniudn.com/images/e/b8/bbf982ff8eb8979a43ded88d8bbfc.png" alt=""></p>
<p>###内存分配<br>Memcached在启动的时候会开辟一块内存(可以通过-m参数修改)，这些内存是按需分配给slabs的。当一个缓存数据需要被存放时，memcached首选要确定对应的slabs，如果此slabs没有足够空间，那么就要申请空间，申请一个page大小的空间，然后按照当前slabs的size(也就是chunk的大小)切分成若干个chunk，然后再将数据存入某一个chunk中。<br><img src="http://geeekr.qiniudn.com/images/f/3b/4b8e69e628b00824a5b1b269bab7f.png" alt=""></p>
<p>####slbas内存分配实例<br><img src="http://geeekr.qiniudn.com/images/1/29/8553a97db78c1805a86e08e40aeca.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Memcached是在项目中常使用的分布式缓存服务。很好的解决了MySQL数据库的访问压力。所以我们要懂它，用好它。</p>
<p>Memcached有三个概念：page，slabs，chunk，要理解Memcached是如何来存储数据的，那就要理解这三个概念是怎么一回事。]]>
    </summary>
    
      <category term="
- 内存
- Memcached
- 缓存" scheme="http://geeekr.com/tags/%E5%86%85%E5%AD%98-Memcached-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从内存角度理解Java线程安全]]></title>
    <link href="http://geeekr.com/thread-safe-jmm/"/>
    <id>http://geeekr.com/thread-safe-jmm/</id>
    <published>2014-09-01T09:20:34.000Z</published>
    <updated>2014-09-23T06:54:34.000Z</updated>
    <content type="html"><![CDATA[<p>线程安全：无非就是保证多个线程有序的访问或修改共享数据。</p>
<p>JVM定义了自己的内存模型，对开发者屏蔽了平台操作内存的细节。在Java中，线程之间是无法直接通信的，只能通过共享对象才能相互通信。下面这张图就诠释了Java中线程是如何通信的。</p>
<p><img src="http://geeekr.qiniudn.com/images/2/c4/52d147bf0d09b14b770d3990740cb.png" alt=""></p>
<p>上图包含了连个概念：可见性，有序性。</p>
<p>####可见性<br>线程A从主内存中拷贝变量x的副本到本地内存中，然后在本地内存中修改x的值，jvm控制将x的值同步到主内存中。线程B也是如此。两个线程就是这样通过主内存共享对象实现两者的通信的。</p>
<p>但是如果他们的执行顺序出了差错，那么x的值就会出错。</p>
<p>例如：</p>
<ol>
<li>线程A拷贝x副本到本地内存。</li>
<li>线程A对x的值+1，x的值为11。</li>
<li>线程B拷贝x副本到本地内存。</li>
<li>线程B对x的值-1，x的值为9。</li>
<li>线程A同步到主内存，主内存的x=11。</li>
<li>线程B同步到主内存，主内存的X=9。</li>
</ol>
<p>####有序性<br>所以要保证同一时刻只有一个线程能操作数据。</p>
<p>Java引入了synchronized关键字将一段代码互斥，保证了线程访问数据的顺序。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(<span class="operator"><span class="keyword">lock</span>)&#123;  </span><br><span class="line">	<span class="keyword">some</span> code...  </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果synchronized关键字与static关键字同时用则锁对象为class对象，否则所对象为实例对象。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>线程安全：无非就是保证多个线程有序的访问或修改共享数据。</p>
<p>JVM定义了自己的内存模型，对开发者屏蔽了平台操作内存的细节。在Java中，线程之间是无法直接通信的，只能通过共享对象才能相互通信。下面这张图就诠释了Java中线程是如何通信的。</p>
<p><img]]>
    </summary>
    
      <category term="
- 内存
- Java
- 线程安全
- Thread-save
- java" scheme="http://geeekr.com/tags/%E5%86%85%E5%AD%98-Java-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-Thread-save-java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Mac上使用tree命令]]></title>
    <link href="http://geeekr.com/tree-command-on-mac/"/>
    <id>http://geeekr.com/tree-command-on-mac/</id>
    <published>2014-08-29T03:20:47.000Z</published>
    <updated>2014-12-09T19:26:01.000Z</updated>
    <content type="html"><![CDATA[<p>以树的形式来显示目录信息可读性非常高，就像下面这样，在网上也经常看到下面这种格式，其实实现起来非常简单，Unix系统里面都会有一个命令<code>tree</code>(需要安装)，功能就是用来以树的形式来遍历目录的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROOT/&#10;&#9492;&#9472;&#9472; WEB-INF&#10;    &#9492;&#9472;&#9472; web.xml</span><br></pre></td></tr></table></figure>
<p>在Mac上默认是没有<code>tree</code>命令的，据说在Ubuntu上也没有。</p>
<p>###安装<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure></p>
<p>###使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree dir&#9;//&#26597;&#30475;&#26576;&#20010;&#30446;&#24405;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L <span class="number">2</span>	<span class="comment">//查看当前目录，但只看2个层级</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>以树的形式来显示目录信息可读性非常高，就像下面这样，在网上也经常看到下面这种格式，其实实现起来非常简单，Unix系统里面都会有一个命令<code>tree</code>(需要安装)，功能就是用来以树的形式来遍历目录的。</p>
<figure class="highligh]]>
    </summary>
    
      <category term="
- Mac
- shell" scheme="http://geeekr.com/tags/Mac-shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[看看Spring的源码(二)——bean实例化]]></title>
    <link href="http://geeekr.com/read-spring-source-two-beans-initialization/"/>
    <id>http://geeekr.com/read-spring-source-two-beans-initialization/</id>
    <published>2014-08-20T06:09:31.000Z</published>
    <updated>2014-08-21T06:52:29.000Z</updated>
    <content type="html"><![CDATA[<p>首先来看一段代码，看过上一节的朋友肯定对这段代码并不陌生。这一段代码诠释了Spring加载bean的完整过程，包括读取配置文件，扫描包，加载类，实例化bean，注入bean属性依赖。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上一节介绍了Spring是如何加载class文件的，本节主要围绕<code>finishBeanFactoryInitialization(beanFactory)</code>方法，聊聊Spring是如何实例化bean的，从上面代码片段中的注解不难看出，此方法主要的任务就是实例化非懒加载的单例bean。闲话少叙，看代码。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">void</span> finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.<span class="keyword">class</span>)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.<span class="keyword">class</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    <span class="built_in">String</span>[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.<span class="keyword">class</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码主要看最后一句<code>beanFactory.preInstantiateSingletons()</code>。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">public</span> void preInstantiateSingletons() throws <span class="keyword">BeansException </span>&#123;</span><br><span class="line">    <span class="preprocessor">if</span> (this.logger.isDebugEnabled()) &#123;</span><br><span class="line">        this.logger.debug(<span class="string">"Pre-instantiating singletons in "</span> + this)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;<span class="keyword">String&gt; </span><span class="keyword">beanNames;</span><br><span class="line"></span>    synchronized (this.<span class="keyword">beanDefinitionMap) </span>&#123;</span><br><span class="line">        // <span class="keyword">Iterate </span>over a copy to allow for init methods which in turn register new <span class="keyword">bean </span>definitions.</span><br><span class="line">        // <span class="preprocessor">While</span> this may not <span class="keyword">be </span>part of the regular factory <span class="keyword">bootstrap, </span><span class="keyword">it </span>does otherwise work fine.</span><br><span class="line">        <span class="keyword">beanNames </span>= new ArrayList&lt;<span class="keyword">String&gt;(this.beanDefinitionNames);</span><br><span class="line"></span>    &#125;</span><br><span class="line">    for (<span class="keyword">String </span><span class="keyword">beanName </span>: <span class="keyword">beanNames) </span>&#123;</span><br><span class="line">        RootBeanDefinition <span class="keyword">bd </span>= getMergedLocalBeanDefinition(<span class="keyword">beanName);</span><br><span class="line"></span>        <span class="preprocessor">if</span> (!<span class="keyword">bd.isAbstract() </span>&amp;&amp; <span class="keyword">bd.isSingleton() </span>&amp;&amp; !<span class="keyword">bd.isLazyInit()) </span>&#123;</span><br><span class="line">            <span class="preprocessor">if</span> (isFactoryBean(<span class="keyword">beanName)) </span>&#123;</span><br><span class="line">                final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + <span class="keyword">beanName);</span><br><span class="line"></span>                <span class="keyword">boolean </span>isEagerInit<span class="comment">;</span></span><br><span class="line">                <span class="preprocessor">if</span> (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) &#123;</span><br><span class="line">                    isEagerInit = AccessController.doPrivileged(new PrivilegedAction&lt;<span class="keyword">Boolean&gt;() </span>&#123;</span><br><span class="line">                        <span class="comment">@Override</span></span><br><span class="line">                        public <span class="keyword">Boolean </span>run() &#123;</span><br><span class="line">                            return ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit()<span class="comment">;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, getAccessControlContext())<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="preprocessor">else</span> &#123;</span><br><span class="line">                    isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;</span><br><span class="line">                            ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit())<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="preprocessor">if</span> (isEagerInit) &#123;</span><br><span class="line">                    getBean(<span class="keyword">beanName);</span><br><span class="line"></span>                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="preprocessor">else</span> &#123;</span><br><span class="line">                getBean(<span class="keyword">beanName);</span><br><span class="line"></span>            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此方法首先将加载进来的beanDefinitionNames循环分析，如果是我们自己配置的bean就会走<code>else</code>中的<code>getBean(beanName)</code>，接着看。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">return</span> <span class="title">doGetBean</span><span class="params">(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>doGetBean</code>方法内容太多，一段一段看。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T doGetBean(</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> <span class="keyword">Object</span>[] args, <span class="built_in">boolean</span> typeCheckOnly)</span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> beanName = transformedBeanName(name);</span><br><span class="line">    <span class="keyword">Object</span> bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="keyword">Object</span> sharedInstance = getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里主要看<code>Object sharedInstance = getSingleton(beanName)</code>。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> getSingleton(<span class="keyword">String</span> beanName, <span class="built_in">boolean</span> allowEarlyReference) &#123;</span><br><span class="line">    <span class="keyword">Object</span> singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="built_in">get</span>(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.<span class="built_in">get</span>(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.<span class="built_in">get</span>(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里能看到，Spring会把实例化好的bean存入<code>singletonObjects</code>，这是一个<code>ConcurrentHashMap</code>，</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;(<span class="number">64</span>);</span><br></pre></td></tr></table></figure>
<p>当然这里我们bean并未实例化过，所以这里应该也不能get出什么东西来，也就是返回null了。<code>if</code>子句也就不会执行了。那么接着看<code>else</code>子句的内容。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">    <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">    <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">    BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">        <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">        String nameToLookup = originalBeanName(name);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="function"><span class="keyword">return</span> parentBeanFactory.<span class="title">getBean</span><span class="params">(nameToLookup, requiredType)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这两条验证也都不会实现，接写来就是重点了。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">    <span class="keyword">String</span>[] dependsOn = mbd.getDependsOn();</span><br><span class="line">    <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> dependsOnBean : dependsOn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDependent(beanName, dependsOnBean)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(<span class="string">"Circular depends-on relationship between '"</span> +</span><br><span class="line">                        beanName + <span class="string">"' and '"</span> + dependsOnBean + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registerDependentBean(dependsOnBean, beanName);</span><br><span class="line">            getBean(dependsOnBean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create bean instance.</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                    <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                    <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                    <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                    destroySingleton(beanName);</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">        <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">        <span class="keyword">Object</span> prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            beforePrototypeCreation(beanName);</span><br><span class="line">            prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            afterPrototypeCreation(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">String</span> scopeName = mbd.getScope();</span><br><span class="line">        <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.<span class="built_in">get</span>(scopeName);</span><br><span class="line">        <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Object</span> scopedInstance = scope.<span class="built_in">get</span>(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterPrototypeCreation(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                    <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; "</span> +</span><br><span class="line">                    <span class="string">"consider defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                    ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里拿到<code>RootBeanDefinition</code>并check，并获得bean的依赖，并循环迭代实例化bean。例如class A依赖于class B，就会先实例化B。下面的<code>if ... else ...</code>就是真正实例化bean的地方。其实真正实例化bean的方法是<code>createBean(beanName, mbd, args)</code>，只是区分了<code>isSingleton</code>或<code>isPrototype</code>，两者的区别在于，单例的(Singleton)被缓存起来，而Prototype是不用缓存的。首先看一下<code>createBean(beanName, mbd, args)</code>。<code>createBean</code>方法中除了做了一些实例化bean前的检查准备工作外，最核心的方法就是</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Object</span> <span class="keyword">beanInstance </span>= doCreateBean(<span class="keyword">beanName, </span>mbd, args)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>由于这个过程涉及到的代码都是一大坨，就不贴出所有代码了。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">    instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">Object</span> bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</span><br><span class="line">Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>首先就是创建一个bean的实例且封装到<code>BeanWrapper</code>中，在这里bean已经实例化了。具体的实现方法是在<code>org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner)</code>中。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition beanDefinition, String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Don't override the class with CGLIB if no overrides.</span></span><br><span class="line">    <span class="keyword">if</span> (beanDefinition.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        <span class="keyword">synchronized</span> (beanDefinition.constructorArgumentLock) &#123;</span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) beanDefinition.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Class&lt;?&gt; clazz = beanDefinition.getBeanClass();</span><br><span class="line">                <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"Specified class is an interface"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            <span class="annotation">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Constructor&lt;?&gt; run() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                <span class="keyword">return</span> clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        constructorToUse =  clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    beanDefinition.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"No default constructor found"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> BeanUtils.<span class="title">instantiateClass</span><span class="params">(constructorToUse)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Must generate CGLIB subclass.</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">instantiateWithMethodInjection</span><span class="params">(beanDefinition, beanName, owner)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里不难看出实例化分两种情况，如果没有无参构造器是就生成CGLIB子类，否则就直接反射成实例。</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T instantiateClass(<span class="function"><span class="keyword">Constructor</span>&lt;<span class="title">T</span>&gt; <span class="title">ctor</span>, <span class="title">Object</span>... <span class="title">args</span>) <span class="title">throws</span> <span class="title">BeanInstantiationException</span> <span class="comment">&#123;</span><br><span class="line">    Assert.notNull(ctor, "Constructor must not be null");</span><br><span class="line">    try &#123;</span><br><span class="line">        ReflectionUtils.makeAccessible(ctor);</span><br><span class="line">        return ctor.newInstance(args);</span><br><span class="line">    &#125;</span></span></span><br></pre></td></tr></table></figure>
<p>既然已经有了实例对象了，那么，Spring是如何将bean的属性注入到bean的呢？返回到上面的<code>doCreateBean</code>方法中。往下看找到<code>populateBean(beanName, mbd, instanceWrapper);</code>，内幕就在这里。只贴部分代码：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean </span>hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors()<span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span>needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="label">if</span> (hasInstAwareBpps <span class="title">||</span> needsDepCheck) &#123;</span><br><span class="line">    PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(<span class="keyword">bw, </span>mbd.allowCaching)<span class="comment">;</span></span><br><span class="line">    <span class="preprocessor">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">        for (<span class="keyword">BeanPostProcessor </span><span class="keyword">bp </span>: getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="preprocessor">if</span> (<span class="keyword">bp </span>instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) <span class="keyword">bp;</span><br><span class="line"></span>                pvs = ibp.postProcessPropertyValues(pvs, filteredPds, <span class="keyword">bw.getWrappedInstance(), </span><span class="keyword">beanName);</span><br><span class="line"></span>                <span class="preprocessor">if</span> (pvs == null) &#123;</span><br><span class="line">                    return<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="preprocessor">if</span> (needsDepCheck) &#123;</span><br><span class="line">        checkDependencies(<span class="keyword">beanName, </span>mbd, filteredPds, pvs)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是调用<code>InstantiationAwareBeanPostProcessor</code>的具体子类的<code>ibp.postProcessPropertyValues</code>方法注入属性。当我们使用<code>@Resource</code>注解的时候，具体的子类是<code>CommonAnnotationBeanPostProcessor</code>；如果使用的是<code>@Autowired</code>注解，则具体的子类是<code>AutowiredAnnotationBeanPostProcessor</code>。此方法内是委托<code>InjectionMetadata</code>对象来完成属性注入。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="label">public</span> PropertyValues postProcessPropertyValues(</span><br><span class="line">        PropertyValues pvs, PropertyDescriptor[] pds, Object <span class="keyword">bean, </span><span class="keyword">String </span><span class="keyword">beanName) </span>throws <span class="keyword">BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    InjectionMetadata metadata = findAutowiringMetadata(<span class="keyword">beanName, </span><span class="keyword">bean.getClass());</span><br><span class="line"></span>    try &#123;</span><br><span class="line">        metadata.inject(<span class="keyword">bean, </span><span class="keyword">beanName, </span>pvs)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new <span class="keyword">BeanCreationException(beanName, </span><span class="string">"Injection of autowired dependencies failed"</span>, ex)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return pvs<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>findAutowiringMetadata</code>方法能拿到使用了特定注解的属性(Field)、方法(Method)及依赖的关系保存到<code>checkedElements</code>集合<code>&lt;Set&gt;</code>里，然后再执行自己的<code>inject</code>方法。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object <span class="keyword">target</span>, String beanName, PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Collection&lt;InjectedElement&gt; elementsToIterate =</span><br><span class="line">            (<span class="keyword">this</span>.checkedElements != <span class="keyword">null</span> ? <span class="keyword">this</span>.checkedElements : <span class="keyword">this</span>.injectedElements);</span><br><span class="line">    <span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line">        <span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Processing injected method of bean '"</span> + beanName + <span class="string">"': "</span> + element);</span><br><span class="line">            &#125;</span><br><span class="line">            element.inject(<span class="keyword">target</span>, beanName, pvs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真正干事的还是<code>InjectedElement</code>的<code>inject</code>方法。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> inject(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanName, PropertyValues pvs) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Field field = (Field) <span class="keyword">this</span>.member;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">Object</span> value;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">            value = resolvedCachedArgument(beanName, <span class="keyword">this</span>.cachedFieldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            DependencyDescriptor desc = <span class="keyword">new</span> DependencyDescriptor(field, <span class="keyword">this</span>.required);</span><br><span class="line">            desc.setContainingClass(bean.getClass());</span><br><span class="line">            Set&lt;<span class="keyword">String</span>&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">String</span>&gt;(<span class="number">1</span>);</span><br><span class="line">            TypeConverter typeConverter = beanFactory.getTypeConverter();</span><br><span class="line">            value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span> || <span class="keyword">this</span>.required) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.cachedFieldValue = desc;</span><br><span class="line">                        registerDependentBeans(beanName, autowiredBeanNames);</span><br><span class="line">                        <span class="keyword">if</span> (autowiredBeanNames.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">String</span> autowiredBeanName = autowiredBeanNames.iterator().next();</span><br><span class="line">                            <span class="keyword">if</span> (beanFactory.containsBean(autowiredBeanName)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (beanFactory.isTypeMatch(autowiredBeanName, field.getType())) &#123;</span><br><span class="line">                                    <span class="keyword">this</span>.cachedFieldValue = <span class="keyword">new</span> RuntimeBeanReference(autowiredBeanName);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.cachedFieldValue = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.cached = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ReflectionUtils.makeAccessible(field);</span><br><span class="line">            field.<span class="built_in">set</span>(bean, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(<span class="string">"Could not autowire field: "</span> + field, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实别看代码这么多，最关键的部分就是：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ReflectionUtils.makeAccessible(field);</span><br><span class="line">    field.<span class="keyword">set</span>(bean, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里也就真相大白了，就是通过JDK反射特性，直接set值的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先来看一段代码，看过上一节的朋友肯定对这段代码并不陌生。这一段代码诠释了Spring加载bean的完整过程，包括读取配置文件，扫描包，加载类，实例化bean，注入bean属性依赖。</p>
<figure class="highlight aspectj"><table>]]>
    </summary>
    
      <category term="
- Spring" scheme="http://geeekr.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[看看Spring的源码（一）——Bean加载过程]]></title>
    <link href="http://geeekr.com/read-spring-source-1-how-to-load-bean/"/>
    <id>http://geeekr.com/read-spring-source-1-how-to-load-bean/</id>
    <published>2014-08-15T14:22:40.000Z</published>
    <updated>2014-08-21T06:52:48.000Z</updated>
    <content type="html"><![CDATA[<p>最近几天跟同事聊起Spring的一些问题，对一些地方有些疑问，趁这两天有点空，看看Spring的源码，了解下具体的实现细节。本文基于Spring 4.0.5版本。</p>
<p>首先Web项目使用Spring是通过在web.xml里面配置<br><code>org.springframework.web.context.ContextLoaderListener</code>初始化IOC容器的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>那就以此为切入点顺藤摸瓜。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span></span><br></pre></td></tr></table></figure>
<p><code>ContextLoaderListener</code>继承了<code>ContextLoader</code>，并且实现<code>ServletContextListener</code>接口。当Server容器（一般指tomcat）启动时，会收到事件初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">	initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>initWebApplicationContext</code>方法是在<code>org.springframework.web.context.ContextLoader</code>类里面。方法太长，分段读一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot initialize context because there is already a root application context present - "</span> +<span class="string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Log logger = LogFactory.getLog(ContextLoader.class);</span><br><span class="line">servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">	logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br></pre></td></tr></table></figure></p>
<p>首先是判断<code>servletContext</code>中是否已经注册了<code>WebApplicationContext</code>，如果有则抛出异常，避免重复注册。然后就是启用log，启动计时。本方法的关键就在于try代码块里的内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line">    <span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">        ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line">        <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">            <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">            <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">            <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line">                <span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">                ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">                cwac.setParent(parent);</span><br><span class="line">            &#125;</span><br><span class="line">            configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line"></span><br><span class="line">    ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">        currentContext = <span class="keyword">this</span>.context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> +</span><br><span class="line">                WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        <span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        logger.info(<span class="string">"Root WebApplicationContext: initialization completed in "</span> + elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里面有几个关键的方法。首先看一下<code>createWebApplicationContext()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(ServletContext sc)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Custom context class ["</span> + contextClass.getName() +</span><br><span class="line">                <span class="string">"] is not of type ["</span> + ConfigurableWebApplicationContext.class.getName() + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先<code>determineContextClass()</code>方法查明具体的<code>Context</code>类，他会读取<code>servletContext</code>的初始化参数<code>contextClass</code>，此参数我们一半不配置，所以<code>Spring</code>就会读取跟<code>org.springframework.web.context.WebApplicationContext</code>同一个包下面的<code>ContextLoader.properties</code>文件读取默认设置，反射出<code>org.springframework.web.context.support.XmlWebApplicationContext</code>类来。接下来就是在<code>configureAndRefreshWebApplicationContext()</code>方法里将新创建的<code>XmlWebApplicationContext</code>进行初始化。首先会设置一个默认ID，即<code>org.springframework.web.context.WebApplicationContext:</code>+你项目的<code>ContextPath</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">    <span class="comment">// The application context id is still set to its original default</span></span><br><span class="line">    <span class="comment">// value</span></span><br><span class="line">    <span class="comment">// -&gt; assign a more useful id based on available information</span></span><br><span class="line">    String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (idParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setId(idParam);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Generate default id...</span></span><br><span class="line">        wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>紧接着就是将<code>ServletContext</code>设置成<code>XmlWebApplicationContext</code>的属性，这样<code>Spring</code>就能在上下文里轻松拿到<code>ServletContext</code>了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wac.setServletContext(sc);</span><br></pre></td></tr></table></figure></p>
<p>接下来就是读取<code>web.xml</code>文件中的<code>contextConfigLocation</code>参数。如果没有配置就会去读<code>WEB-INF下的applicationContext.xml</code>文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:beans.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>并将值设置(就是我们的Spring配置文件的路径)进<code>XmlWebApplicationContext</code>中。然后就会在指定的路径加载配置文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line"><span class="keyword">if</span> (configLocationParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">    wac.setConfigLocation(configLocationParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来就是<code>customizeContext(sc, wac)</code>方法，此方法会根据用户配置的<code>globalInitializerClasses</code>参数来初始化一些用户自定义的属性，一般我们不配置，所以这里什么也不做。</p>
<p>最后登场的就是最核心的方法了，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wac.refresh();</span><br></pre></td></tr></table></figure></p>
<p>在这个方法里，会完成资源文件的加载、配置文件解析、Bean定义的注册、组件的初始化等核心工作，我们一探究竟。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>次方法是同步的，避免重复刷新，每个步骤都放在单独的方法内，流程清晰，是值得学习的地方。这里面有个重要的方法是<code>finishBeanFactoryInitialization(beanFactory);</code>，里面的内容是Spring如何实例化bean，并注入依赖的，这个内容下一节讲，本节只说明Spring是如何加载class文件的。</p>
<p>首先就是<code>prepareRefresh()</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.activeMonitor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.active = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize any placeholder property sources in the context environment</span></span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate that all properties marked as required are resolvable</span></span><br><span class="line">    <span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此方法做一些准备工作，如记录开始时间，输出日志，<code>initPropertySources();</code>和<code>getEnvironment().validateRequiredProperties();</code>一般没干什么事。</p>
<p>接下来就是初始化<code>BeanFactory</code>，是整个<code>refresh()</code>方法的核心，其中完成了配置文件的加载、解析、注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br></pre></td></tr></table></figure></p>
<p>看看它里面都做了些什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先<code>refreshBeanFactory()</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们看到会创建一个<code>DefaultListableBeanFactory</code>实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br></pre></td></tr></table></figure></p>
<p>再设置一个ID<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beanFactory.setSerializationId(getId());</span><br></pre></td></tr></table></figure></p>
<p>然后设置一些自定义参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customizeBeanFactory(beanFactory);</span><br></pre></td></tr></table></figure></p>
<p>这里面最重要的就是<code>loadBeanDefinitions(beanFactory);</code>方法了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">    XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the bean definition reader with this context's</span></span><br><span class="line">    <span class="comment">// resource loading environment.</span></span><br><span class="line">    beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">    beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">    <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此方法会通过<code>XmlBeanDefinitionReader</code>加载bean定义。具体的实现方法是在<code>org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions</code>方法中定义的。这里设计了层层调用，有好多重载方法，主要就是加载Spring所有的配置文件(可能会有多个)，以备后面解析，注册之用。我一路追踪到<code>org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(Element root)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">    String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">        Assert.state(<span class="keyword">this</span>.environment != <span class="keyword">null</span>, <span class="string">"Environment must be set for evaluating profiles"</span>);</span><br><span class="line">        String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">                profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.environment.acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">    <span class="keyword">this</span>.delegate = createDelegate(<span class="keyword">this</span>.readerContext, root, parent);</span><br><span class="line">    preProcessXml(root);</span><br><span class="line">    parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">    postProcessXml(root);</span><br><span class="line">    <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里创建了一个<code>BeanDefinitionParserDelegate</code>示例，解析XML的过程就是委托它完成的，我们不关心它是怎样解析XML的，我们只关心是怎么加载类的，所以就要看<code>parseBeanDefinitions(root, this.delegate)</code>方法了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        NodeList nl = root.getChildNodes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">                Element ele = (Element) node;</span><br><span class="line">                <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们看到最终解析XML元素的是<code>delegate.parseCustomElement(ele)</code>方法，最终会走到一下方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">    String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">    NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里会根据不同的XML节点，会委托<code>NamespaceHandlerSupport</code>找出合适的<code>BeanDefinitionParser</code>，如果我们配置了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan</span><br><span class="line">	base-<span class="keyword">package</span>=<span class="string">"com.geeekr.service,com.geeekr.dao"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>那么对应<code>BeanDefinitionParser</code>就是<code>org.springframework.context.annotation.ComponentScanBeanDefinitionParser</code>，来看看它的<code>parse</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">    String[] basePackages = StringUtils.tokenizeToStringArray(element.getAttribute(BASE_PACKAGE_ATTRIBUTE),</span><br><span class="line">            ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actually scan for bean definitions and register them.</span></span><br><span class="line">    ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages);</span><br><span class="line">    registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不难看出这里定义了一个<code>ClassPathBeanDefinitionScanner</code>，通过它去扫描包中的类文件，<strong><em>注意：这里是类文件而不是类，因为现在这些类还没有被加载，只是ClassLoader能找到这些class的路径而已。</em></strong>到目前为止，感觉真想距离我们越来越近了。顺着继续往下摸。进入<code>doSacn</code>方法里，映入眼帘的又是一大坨代码，但是我们只关心观点的部分。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="string">"At least one base package must be specified"</span>);</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">                postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">                BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">                definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一眼就能看出是通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br></pre></td></tr></table></figure></p>
<p>有时候不得不佩服这些外国人起名字的功力，把扫描出来的类叫做candidates(候选人)；真是不服不行啊，这种名字真的很容易理解有不有？哈哈，貌似扯远了。继续往下看。这里只列出方法的主题部分。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title">findCandidateComponents</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;BeanDefinition&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                resolveBasePackage(basePackage) + <span class="string">"/"</span> + <span class="keyword">this</span>.resourcePattern;</span><br><span class="line">        Resource[] resources = <span class="keyword">this</span>.resourcePatternResolver.getResources(packageSearchPath);</span><br><span class="line">        <span class="keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">        <span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                logger.trace(<span class="string">"Scanning "</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MetadataReader metadataReader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(resource);</span><br><span class="line">                    <span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                        ScannedGenericBeanDefinition sbd = <span class="keyword">new</span> ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                        sbd.setResource(resource);</span><br><span class="line">                        sbd.setSource(resource);</span><br></pre></td></tr></table></figure></p>
<p>先看这两句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + resolveBasePackage(basePackage) + <span class="string">"/"</span> + <span class="keyword">this</span>.resourcePattern;</span><br></pre></td></tr></table></figure></p>
<p>假设我们配置的需要扫描的包名为<code>com.geeekr.service</code>，那么<code>packageSearchPath</code>的值就是<code>classpath*:com.geeekr.service/**/*.class</code>，意思就是com.geeekr.service包(包括子包)下所有class文件；如果配置的是<code>*</code>，那么<code>packageSearchPath</code>的值就是<code>classpath*:*/**/*.class</code>。这里的表达式是Spring自己定义的。Spring会根据这种表达式找出相关的class文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource[] resources = <span class="keyword">this</span>.resourcePatternResolver.getResources(packageSearchPath);</span><br></pre></td></tr></table></figure></p>
<p>这一句就把相关class文件加载出来了，那我们就要看看，Spring究竟是如何把class文件找到的了。首先看看<code>resourcePatternResolver</code>的定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br></pre></td></tr></table></figure></p>
<p>进入<code>getResources</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> Resource[] getResources(String locationPattern) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Assert.notNull(locationPattern, <span class="string">"Location pattern must not be null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) &#123;</span><br><span class="line">        <span class="comment">// a class path resource (multiple resources for same name possible)</span></span><br><span class="line">        <span class="keyword">if</span> (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) &#123;</span><br><span class="line">            <span class="comment">// a class path resource pattern</span></span><br><span class="line">            <span class="keyword">return</span> findPathMatchingResources(locationPattern);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// all class path resources with the given name</span></span><br><span class="line">            <span class="keyword">return</span> findAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Only look for a pattern after a prefix here</span></span><br><span class="line">        <span class="comment">// (to not get fooled by a pattern symbol in a strange prefix).</span></span><br><span class="line">        <span class="keyword">int</span> prefixEnd = locationPattern.indexOf(<span class="string">":"</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) &#123;</span><br><span class="line">            <span class="comment">// a file pattern</span></span><br><span class="line">            <span class="keyword">return</span> findPathMatchingResources(locationPattern);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// a single resource with the given name</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Resource[] &#123;getResourceLoader().getResource(locationPattern)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里会先判断表达式是否以<code>classpath*:</code>开头。前面我们看到Spring已经给我们添加了这个头，这里当然符合条件了。接着会进入<code>findPathMatchingResources</code>方法。在这里又把<code>**/*.class</code>去掉了，然后在调用<code>getResources</code>方法，然后在进入<code>findAllClassPathResources</code>方法。这里的参数只剩下包名了例如<code>com/geeekr/service/</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Resource[] findAllClassPathResources(String location) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    String path = location;</span><br><span class="line">    <span class="keyword">if</span> (path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">        path = path.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ClassLoader cl = getClassLoader();</span><br><span class="line">    Enumeration&lt;URL&gt; resourceUrls = (cl != <span class="keyword">null</span> ? cl.getResources(path) : ClassLoader.getSystemResources(path));</span><br><span class="line">    Set&lt;Resource&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;Resource&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">while</span> (resourceUrls.hasMoreElements()) &#123;</span><br><span class="line">        URL url = resourceUrls.nextElement();</span><br><span class="line">        result.add(convertClassLoaderURL(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toArray(<span class="keyword">new</span> Resource[result.size()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>真相大白了，Spring也是用的<code>ClassLoader</code>加载的class文件。一路追踪，原始的ClassLoader是<code>Thread.currentThread().getContextClassLoader();</code>。到此为止，就拿到class文件了。<br>Spring会将class信息封装成<code>BeanDefinition</code>，然后再放进<code>DefaultListableBeanFactory</code>的<code>beanDefinitionMap</code>中。</p>
<p>拿到了class文件后，就要看看Spring是如何装配bean的了，下一节，继续看。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近几天跟同事聊起Spring的一些问题，对一些地方有些疑问，趁这两天有点空，看看Spring的源码，了解下具体的实现细节。本文基于Spring 4.0.5版本。</p>
<p>首先Web项目使用Spring是通过在web.xml里面配置<br><code>org.spri]]>
    </summary>
    
      <category term="
- Spring" scheme="http://geeekr.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[归并排序（Merge sort）]]></title>
    <link href="http://geeekr.com/gui-bing-pai-xu-merge-sort/"/>
    <id>http://geeekr.com/gui-bing-pai-xu-merge-sort/</id>
    <published>2014-07-21T02:49:27.000Z</published>
    <updated>2014-09-23T06:53:22.000Z</updated>
    <content type="html"><![CDATA[<p><strong>归并算法(merge)</strong>：指的是将两个已经排序的序列合并成一个序列的操作。<br><img src="http://upload.wikimedia.org/wikipedia/commons/c/c5/Merge_sort_animation2.gif" alt=""></p>
<p>####归并操作的过程如下：</p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<p>####java 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] MergeSort(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">	<span class="keyword">int</span>[] C = <span class="keyword">new</span> <span class="keyword">int</span>[A.length + B.length];</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//三个数组的索引</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] &lt; B[j])</span><br><span class="line">			C[k++] = A[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			C[k++] = B[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; A.length) </span><br><span class="line">		C[k++] = A[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt; B.length) </span><br><span class="line">		C[k++] = B[j++];</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>归并算法(merge)</strong>：指的是将两个已经排序的序列合并成一个序列的操作。<br><img src="http://upload.wikimedia.org/wikipedia/commons/c/c5/Merge_sort_animatio]]>
    </summary>
    
      <category term="
- 算法
- sort
- 排序" scheme="http://geeekr.com/tags/%E7%AE%97%E6%B3%95-sort-%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Install Shadowsocks on Centos]]></title>
    <link href="http://geeekr.com/install-shadowsocks-on-centos/"/>
    <id>http://geeekr.com/install-shadowsocks-on-centos/</id>
    <published>2014-07-15T10:45:44.000Z</published>
    <updated>2014-09-23T06:53:01.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>身为有理想、有追求的有志青年，出于对自由的向往，怎能甘心接受被围在墙内？</p>
</blockquote>
<p><strong><em>so, I do that：</em></strong> </p>
<blockquote>
<p>install shadowsocks on my digitalocean VPS</p>
</blockquote>
<p>####ready<br>开发者必备之 <em>Development Tools</em><br><br><code>yum groupinstall &#39;Development Tools&#39;</code><br><br><code>yum install git</code></p>
<p>####do it</p>
<p><code>git clone https://github.com/madeye/shadowsocks-libev.git</code><br><br><code>cd shadowsocks-libev</code><br><br><em>编译安装三部曲：</em><br><br><code>./configure</code><br><br><code>make</code><br><br><code>make install</code><br></p>
<p>####use it</p>
<p><code>nohup /usr/local/bin/ss-server -s IP地址 -p 端口 -k 密码 -m 加密方式 &amp;</code></p>
<blockquote>
<ul>
<li>-s #vps的IP地址</li>
<li>-p #端口</li>
<li>-k #自定义的密码</li>
<li>-m #加密方式，推荐使用aes-256-cfb</li>
</ul>
</blockquote>
<p>示例：<code>nohup /usr/local/bin/ss-server -s 11.22.33.44 -p 12345 -k 12345678 -m aes-256-cfb &amp;</code></p>
<p>为了方便，加入开机启动：<br><code>echo &quot;nohup /usr/local/bin/ss-server -s 11.22.33.44 -p 12345 -k 12345678 -m aes-256-cfb &amp;&quot; &gt;&gt; /etc/rc.local</code></p>
<p>android 和 iOS都有Shadowsocks客户端</p>
<blockquote>
<p><strong><em>注意：</em></strong><br>当你完成以上所有步骤以后，你可能会很伤心，很难过，因为你的客户端能连上但不能上网。<br><br><strong><em>请不要伤心，也不要难过：</em></strong><br>执行神一样的命令<code>yum update</code>即可。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>身为有理想、有追求的有志青年，出于对自由的向往，怎能甘心接受被围在墙内？</p>
</blockquote>
<p><strong><em>so, I do that：</em></strong> </p>
<blockquote>
<p>inst]]>
    </summary>
    
      <category term="
- shadowsocks
- 翻墙
- CentOS
- Shadowsocks" scheme="http://geeekr.com/tags/shadowsocks-%E7%BF%BB%E5%A2%99-CentOS-Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[主机已经迁移至旧金山]]></title>
    <link href="http://geeekr.com/zhu-ji-yi-jing-qian-yi-zhi-jiu-jin-shan/"/>
    <id>http://geeekr.com/zhu-ji-yi-jing-qian-yi-zhi-jiu-jin-shan/</id>
    <published>2014-07-15T10:07:28.000Z</published>
    <updated>2014-09-23T06:52:15.000Z</updated>
    <content type="html"><![CDATA[<p>用了一个多月的DigitalOcean新加坡机房，感受实在不爽，很不稳定。当初为了比较低的响应时间而选择了新加坡机房，但是DigitalOcean实在太不用心了。服务不稳定，经常丢包。联通和电信的线路还不拥有同等待遇。索性搬到了旧金山。还是5刀的套餐。</p>
<p>同时还部署了shadowsocks 做备用翻墙用，速度那是杠杠的。平时MAC上使用GreenVPN，nexus 5上使用fqrouter，这下又有了shadowsocks，真是条条大路都能通到自由世界了。妈妈再也不用担心我找不到谷哥了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用了一个多月的DigitalOcean新加坡机房，感受实在不爽，很不稳定。当初为了比较低的响应时间而选择了新加坡机房，但是DigitalOcean实在太不用心了。服务不稳定，经常丢包。联通和电信的线路还不拥有同等待遇。索性搬到了旧金山。还是5刀的套餐。</p>
<p>同时还]]>
    </summary>
    
      <category term="
- VPN
- blog
- 主机
- DigitalOcean
- shadowsocks
- Shadowsocks" scheme="http://geeekr.com/tags/VPN-blog-%E4%B8%BB%E6%9C%BA-DigitalOcean-shadowsocks-Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下安装SVN 插件 javaHL not available]]></title>
    <link href="http://geeekr.com/install-svn-on-mac-javahl-not-acailable/"/>
    <id>http://geeekr.com/install-svn-on-mac-javahl-not-acailable/</id>
    <published>2014-06-16T08:31:37.000Z</published>
    <updated>2014-08-21T06:55:42.000Z</updated>
    <content type="html"><![CDATA[<p>当在MAC环境下的eclipse安装subeclipse插件时会出现如下图所示的错误：</p>
<p><img src="http://geeekr.qiniudn.com/images/b/74/33232c351424862ecc68312f4690f.png" alt=""></p>
<p><strong><em>说明系统缺少JavaHL，需要我们手动安装。</em></strong></p>
<p>当然，这并不影响使用，只要选择SVNKit方式作为client。</p>
<p><img src="http://geeekr.qiniudn.com/images/6/9a/e44f00181efdde18820d73a0d27b1.png" alt=""></p>
<p>但是官方建议使用JavaHL作为client，稳定性，速度都比SVNKit好很多。经过实际使用SVNKit还会出现未知错误。（javaHL是通过jni的方式来调用本地的SVN库，所以说速度快，稳定可靠）</p>
<blockquote>
<p>SVNKit 是 Subversion 的纯 Java 连接库版本，整个连接底层都是由 Java 实现的，不需要额外的支持。而 JavaHL 则使用的是 Subversion 原生的连接库，加上了 Java 调用库。这两种连接库给人表征的感觉应该是 JavaHL 在连接稳定性和速度上应该占优，而 SVNKit 则应该更省事，适用性更广。</p>
</blockquote>
<p>###安装步骤</p>
<p>sbueclipse官方wiki给出来解决方法：<a href="http://subclipse.tigris.org/wiki/JavaHL" target="_blank" rel="external">wiki</a></p>
<p>这里只解释通过HomeBrew方式安装：</p>
<p><code>brew install --universal --java subversion</code></p>
<p>经geeekr君亲测这个过程会很漫长。安装完成后，它会提示你：You may need to link the Java bindings…….，然后执行下边的两个sudo命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /Library/Java/Extensions&#10;sudo ln -s /usr/local/homebrew/lib/libsvnjavahl-1.dylib /Library/Java/Extensions/libsvnjavahl-1.dylib</span><br></pre></td></tr></table></figure></p>
<p>最后一行会显示JavaHL的版本。比如我的就是下边的这个样子：版本号是：1.8.8</p>
<p><img src="http://geeekr.qiniudn.com/images/7/dc/c27364deb190b2ee2b4df614b03d4.png" alt=""></p>
<p>如果依然有错误，则可能是因为Subeclipse和JavaHL的版本不对应，<a href="http://subclipse.tigris.org/wiki/JavaHL" target="_blank" rel="external">wiki</a>上给出的说明是：</p>
<p><img src="http://geeekr.qiniudn.com/images/d/22/928b8434a111152a9aebf878dd0f5.png" alt=""></p>
<p>选择对应的版本就OK了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当在MAC环境下的eclipse安装subeclipse插件时会出现如下图所示的错误：</p>
<p><img src="http://geeekr.qiniudn.com/images/b/74/33232c351424862ecc68312f4690f.png" alt]]>
    </summary>
    
      <category term="
- Mac
- SVN" scheme="http://geeekr.com/tags/Mac-SVN/"/>
    
  </entry>
  
</feed>
